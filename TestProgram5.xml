<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>chan trig,chk;
int Top_dt = 0;
int Low_dt = 0;
const int Top_Interval = 0;
const int Low_Interval = 1000;
const int Top_Range = 0;
const int Low_Range = 2000;
const int Top_Sampling = 1;
const int Low_Sampling = 0;
const int Event = 1;
const int NoEvent = 0;
const int TOP = 0;
const int LOW = 1;
const int LOWLOW = 2;
int Top_Reg1;
int Low_Reg1;
int Top_Reg2;
int Low_Reg2;
int Top_Reg3;
int Low_Reg3;
bool BoolReg1;
bool BoolReg2;
bool BoolReg3;


int Top_Ha4px0 = -10;
int Low_Ha4px0 = 0;
int Top_Ha4py0 = -10;
int Low_Ha4py0 = 0;
int Top_Ha4vx0 = 4;
int Low_Ha4vx0 = 0;
int Top_Ha4vy0 = 1;
int Low_Ha4vy0 = 0;
int Top_Ssfuncpxsqm;
int Low_Ssfuncpxsqm;
int Top_Ssfuncpysqm;
int Low_Ssfuncpysqm;
int Top_Ssfuncvxsqm;
int Low_Ssfuncvxsqm;
int Top_Ssfuncvysqm;
int Low_Ssfuncvysqm;
int Top_Ha4Trajpxsqm;
int Low_Ha4Trajpxsqm;
int Top_Ha4Trajpysqm;
int Low_Ha4Trajpysqm;
int Top_Ha4Trajvxsqm;
int Low_Ha4Trajvxsqm;
int Top_Ha4Trajvysqm;
int Low_Ha4Trajvysqm;
int Top_Trajinput;
int Low_Trajinput;
int Top_Trajpx;
int Low_Trajpx;
int Top_Trajvx;
int Low_Trajvx;
int Top_Ha4Traj1Movingp0;
int Low_Ha4Traj1Movingp0;
int Top_Ha4Traj1Movingv0;
int Low_Ha4Traj1Movingv0;
int Top_Ha4Traj1Moving1integral;
int Top_Ha4Traj1Moving1integral_input;
int Top_Ha4Traj1Moving1integral_inputPRE;
int Top_Movingvsqm;
int Low_Ha4Traj1Moving1integral;
int Low_Ha4Traj1Moving1integral_input;
int Low_Ha4Traj1Moving1integral_inputPRE;
int Low_Movingvsqm;
int Top_Movingv;
int Low_Movingv;
int Top_Ha4Traj1Moving3integral;
int Top_Ha4Traj1Moving3integral_input;
int Top_Ha4Traj1Moving3integral_inputPRE;
int Top_Movingpsqm;
int Low_Ha4Traj1Moving3integral;
int Low_Ha4Traj1Moving3integral_input;
int Low_Ha4Traj1Moving3integral_inputPRE;
int Low_Movingpsqm;
int Top_Movingp;
int Low_Movingp;
int Top_Trajpy;
int Low_Trajpy;
int Top_Trajvy;
int Low_Trajvy;
int Top_Ha4Traj2Movingp0;
int Low_Ha4Traj2Movingp0;
int Top_Ha4Traj2Movingv0;
int Low_Ha4Traj2Movingv0;
int Top_Ha4Traj2Moving1integral;
int Top_Ha4Traj2Moving1integral_input;
int Top_Ha4Traj2Moving1integral_inputPRE;
int Low_Ha4Traj2Moving1integral;
int Low_Ha4Traj2Moving1integral_input;
int Low_Ha4Traj2Moving1integral_inputPRE;
int Top_Ha4Traj2Moving3integral;
int Top_Ha4Traj2Moving3integral_input;
int Top_Ha4Traj2Moving3integral_inputPRE;
int Low_Ha4Traj2Moving3integral;
int Low_Ha4Traj2Moving3integral_input;
int Low_Ha4Traj2Moving3integral_inputPRE;
int Ha4Traj3edge_input;
int Ha4Traj3edge_inputPRE;
int Trajev1;
int Ha4Traj4edge_input;
int Ha4Traj4edge_inputPRE;
int Trajev2;
int Ha4Traj5edge_input;
int Ha4Traj5edge_inputPRE;
int Trajev3;
int Ha4Traj6edge_input;
int Ha4Traj6edge_inputPRE;
int Trajev4;
int Top_Ha4Output1;
int Low_Ha4Output1;
int Top_Ha4Output2;
int Low_Ha4Output2;
int Top_Ha4Output3;
int Low_Ha4Output3;
int Top_Ha4Output4;
int Low_Ha4Output4;

int Top_Output1;
int Low_Output1;
int Top_Output2;
int Low_Output2;
int Top_Output3;
int Low_Output3;
int Top_Output4;
int Low_Output4;



int power(int x,int n){
  int num=1,i;
  for(i=0;i&lt;n;i++) num = num * x;
  return num;
}

int positive(int top,int low){
if(top &lt; 0 || (top == 0 &amp;&amp; low &lt; 0)) return 0;
else return 1;
}

int IncNum(int top,int low){
  if(top &lt; 0 &amp;&amp; low &gt; 0) return (low/10000) + 1;
  else if(top &gt; 0 &amp;&amp; low &lt; 0) return (low/10000) - 1;
  else return low/10000;
}

int add(int top1,int low1,int top2,int low2,int class){
  int top,low,inc;
  top = top1 + top2;
  low = low1 + low2;
  inc = IncNum(top,low);
  if(class == TOP) return top + inc;
  else return low - inc*10000;
} 

int sub(int top1,int low1,int top2,int low2,int class){
  int top,low,inc;
  top = top1 - top2;
  low = low1 - low2;
  inc = IncNum(top,low);
  if(class == TOP) return top + inc;
  else return low - inc*10000;
} 

int addsub3(int top1,int low1,int lowlow1,int top2,int low2,int lowlow2,int class){
  int top,low,lowlow,inc;
  lowlow = add(low1,lowlow1,low2,lowlow2,LOW);
  low = add(low1,lowlow1,low2,lowlow2,TOP);
  top = top1+top2;
  inc = IncNum(top,low);
  if(class == TOP) return top + inc;
  else if(class == LOW) return low - inc*10000;
  else return lowlow;
}

int mult(int top1,int low1,int top2,int low2,int class){
  int t1=top1,t2=top2,l1=low1,l2=low2;
  int num1[10],num2[10],i,j,num[20],answer=0,flag=1,t,n1,n2;
  for(i=0;i&lt;20;i++) num[i]=0;
  if(positive(top1,low1) &amp;&amp; !positive(top2,low2)){
    t2 = -t2;
    l2 = -l2;
    flag = -1;
  }
  else if(!positive(top1,low1) &amp;&amp; positive(top2,low2)){
    t1 = -t1;
    l1 = -l1;
    flag = -1;
  }
  else if(!positive(top1,low1) &amp;&amp; !positive(top2,low2)){
    t1 = -t1;
    t2 = -t2;
    l1 = -l1;
    l2 = -l2;
  }
  
  for(i=0;i&lt;4;i++){
    num1[i] = (l1/power(10,i))%10;
    num2[i] = (l2/power(10,i))%10;
    num1[i+4] = (t1/power(10,i))%10;
    num2[i+4] = (t2/power(10,i))%10;
  }

  for(i=0;i&lt;8;i++){
    for(j=0;j&lt;8;j++){
      t = num1[i] * num2[j];
      num[i+j] += t%10;
      num[i+j+1] += t/10;
    }
  }
  for(i=0;i&lt;15;i++){
    num[i+1] += num[i]/10;
    num[i] = num[i]%10;
  }
  if(class == LOW){
    for(i=0;i&lt;4;i++){
      answer += num[i+4] * power(10,i);
    }
  }
  else{
    for(i=0;i&lt;4;i++){
      answer += num[i+8] * power(10,i);
    }
  }
  return answer * flag;
} 

int div(int top1,int low1,int top2,int low2,int class){
  int t1=top1,t2=top2,l1=low1,l2=low2,ll1=0,ll2=0;
  int top=0,low=0,flag=1,i,j,t,l,ll;

  if(positive(top1,low1) &amp;&amp; !positive(top2,low2)){
    t2 = -t2;
    l2 = -l2;
    flag = -1;
  }
  else if(!positive(top1,low1) &amp;&amp; positive(top2,low2)){
    t1 = -t1;
    l1 = -l1;
    flag = -1;
  }
  else if(!positive(top1,low1) &amp;&amp; !positive(top2,low2)){
    t1 = -t1;
    t2 = -t2;
    l1 = -l1;
    l2 = -l2;
  }

  for(i=0;t1 &gt; t2 || (t1==t2 &amp;&amp; l1&gt;=l2);i++){ 
    top++;
    t=addsub3(t1,l1,ll1,-t2,-l2,-ll2,TOP);
    l=addsub3(t1,l1,ll1,-t2,-l2,-ll2,LOW);
    ll=addsub3(t1,l1,ll1,-t2,-l2,-ll2,LOWLOW);
    t1 = t;
    l1 = l;
    ll1 = ll;
  }

  for(i=0;i&lt;4;i++){
    ll2 = ll2/10 + (l2%10)*1000;
    l2 = l2/10 + (t2%10)*1000;
    t2 = t2/10;
    low=low*10;
    if(t2 != 0 || l2 != 0){
      for(j=0;t1 &gt; t2 || (t1==t2 &amp;&amp; l1&gt;=l2);j++){
	low++;
	t=addsub3(t1,l1,ll1,-t2,-l2,-ll2,TOP);
	l=addsub3(t1,l1,ll1,-t2,-l2,-ll2,LOW);
	ll=addsub3(t1,l1,ll1,-t2,-l2,-ll2,LOWLOW);
	t1 = t;
	l1 = l;
	ll1 = ll;
      } 
    }
  }
  if(class == TOP) return top * flag;
  else return low * flag;
}

bool compareL(int top1,int low1,int top2,int low2){
  if(top1 &lt; top2) return true;
  else if(top1 &gt; top2) return false;
  else if(low1 &lt; low2) return true;
  else return false;
}

bool comparR(int top1,int low1,int top2,int low2){
  if(top1 &gt; top2) return true;
  else if(top1 &lt; top2) return false;
  else if(low1 &gt; low2) return true;
  else return false;
}

bool compareEL(int top1,int low1,int top2,int low2){
  if(top1 &lt; top2) return true;
  else if(top1 &gt; top2) return false;
  else if(low1 &lt;= low2) return true;
  else return false;
}

bool compareER(int top1,int low1,int top2,int low2){
  if(top1 &gt; top2) return true;
  else if(top1 &lt; top2) return false;
  else if(low1 &gt;= low2) return true;
  else return false;
}

bool compareE(int top1,int low1,int top2,int low2){ return ((top1 == top2) &amp;&amp; (low1 == low2));}
int AND(int left,int right){return left &amp;&amp; right;}int OR(int left,int right){return left || right;}int NOT(int bo){return !bo;}
 </declaration>
	<template>
		<name>SwitchSignalFunction</name>
		<location id="id0" x="0" y="0">
		</location>
		<location id="id1" x="0" y="100">
			<committed/>
		</location>
		<location id="id2" x="200" y="0">
			<committed/>
		</location>
		<location id="id3" x="400" y="0">
			<committed/>
		</location>
		<location id="id4" x="400" y="100">
			<committed/>
		</location>
		<location id="id5" x="600" y="0">
			<committed/>
		</location>
		<location id="id6" x="600" y="100">
			<name x="610" y="100">ha4_switch</name>
			<committed/>
		</location>
		<init ref="id1"/>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="100" y="0">trig?</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="100" y="-200">chk!</label>
			<label kind="assignment" x="100" y="-300">Top_Output1 := Top_Ha4Output1,
Low_Output1 := Low_Ha4Output1,
Top_Output2 := Top_Ha4Output2,
Low_Output2 := Low_Ha4Output2,
Top_Output3 := Top_Ha4Output3,
Low_Output3 := Low_Ha4Output3,
Top_Output4 := Top_Ha4Output4,
Low_Output4 := Low_Ha4Output4</label>
			<nail x="600" y="-200"/>
			<nail x="0" y="-200"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id1"/>
			<nail x="600" y="300"/>
			<nail x="0" y="300"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="assignment" x="0" y="0">Top_Ha4Trajpxsqm := Top_Ha4px0,
Low_Ha4Trajpxsqm := Low_Ha4px0,
Top_Ha4Trajpysqm := Top_Ha4py0,
Low_Ha4Trajpysqm := Low_Ha4py0,
Top_Ha4Trajvxsqm := Top_Ha4vx0,
Low_Ha4Trajvxsqm := Low_Ha4vx0,
Top_Ha4Trajvysqm := Top_Ha4vy0,
Low_Ha4Trajvysqm := Low_Ha4vy0,
Top_Trajinput := 0,
Low_Trajinput := 0,
Top_dt := 0,
Low_dt := 0,
Top_Ha4Traj1Movingp0 := Top_Ha4Trajpxsqm,
Low_Ha4Traj1Movingp0 := Low_Ha4Trajpxsqm,
Top_Ha4Traj1Movingv0 := Top_Ha4Trajvxsqm,
Low_Ha4Traj1Movingv0 := Low_Ha4Trajvxsqm,
Top_dt := 0,
Low_dt := 0,
Top_Ha4Traj1Moving1integral := 0,
Top_Ha4Traj1Moving1integral_input := 0,
Top_Ha4Traj1Moving1integral_inputPRE := 0,
Low_Ha4Traj1Moving1integral := 0,
Low_Ha4Traj1Moving1integral_input := 0,
Low_Ha4Traj1Moving1integral_inputPRE := 0,
Top_Ha4Traj1Moving3integral := 0,
Top_Ha4Traj1Moving3integral_input := 0,
Top_Ha4Traj1Moving3integral_inputPRE := 0,
Low_Ha4Traj1Moving3integral := 0,
Low_Ha4Traj1Moving3integral_input := 0,
Low_Ha4Traj1Moving3integral_inputPRE := 0,
Top_Ha4Traj2Movingp0 := Top_Ha4Trajpysqm,
Low_Ha4Traj2Movingp0 := Low_Ha4Trajpysqm,
Top_Ha4Traj2Movingv0 := Top_Ha4Trajvysqm,
Low_Ha4Traj2Movingv0 := Low_Ha4Trajvysqm,
Top_dt := 0,
Low_dt := 0,
Top_Ha4Traj2Moving1integral := 0,
Top_Ha4Traj2Moving1integral_input := 0,
Top_Ha4Traj2Moving1integral_inputPRE := 0,
Low_Ha4Traj2Moving1integral := 0,
Low_Ha4Traj2Moving1integral_input := 0,
Low_Ha4Traj2Moving1integral_inputPRE := 0,
Top_Ha4Traj2Moving3integral := 0,
Top_Ha4Traj2Moving3integral_input := 0,
Top_Ha4Traj2Moving3integral_inputPRE := 0,
Low_Ha4Traj2Moving3integral := 0,
Low_Ha4Traj2Moving3integral_input := 0,
Low_Ha4Traj2Moving3integral_inputPRE := 0,
Ha4Traj3edge_input := 1,
Ha4Traj3edge_inputPRE := 1,
Ha4Traj4edge_input := 1,
Ha4Traj4edge_inputPRE := 1,
Ha4Traj5edge_input := 1,
Ha4Traj5edge_inputPRE := 1,
Ha4Traj6edge_input := 1,
Ha4Traj6edge_inputPRE := 1</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="assignment" x="200" y="0">Top_Ha4Traj1Moving1integral_input := 0,
Low_Ha4Traj1Moving1integral_input := 0,
Top_Reg1 := Top_Ha4Traj1Moving1integral,
Low_Reg1 := Low_Ha4Traj1Moving1integral,
Top_Reg2 := mult(Top_Ha4Traj1Moving1integral_inputPRE,Low_Ha4Traj1Moving1integral_inputPRE,Top_dt,Low_dt,TOP),
Low_Reg2 := mult(Top_Ha4Traj1Moving1integral_inputPRE,Low_Ha4Traj1Moving1integral_inputPRE,Top_dt,Low_dt,LOW),
Top_Ha4Traj1Moving1integral := add(Top_Reg1,Low_Reg1,Top_Reg2,Low_Reg2,TOP),
Low_Ha4Traj1Moving1integral := add(Top_Reg1,Low_Reg1,Top_Reg2,Low_Reg2,LOW),
Top_Movingvsqm := Top_Ha4Traj1Moving1integral,
Low_Movingvsqm := Low_Ha4Traj1Moving1integral,
Top_Ha4Traj1Moving1integral_inputPRE := Top_Ha4Traj1Moving1integral_input,
Low_Ha4Traj1Moving1integral_inputPRE := Low_Ha4Traj1Moving1integral_input,
Top_Movingv := add(Top_Movingvsqm,Low_Movingvsqm,Top_Ha4Traj1Movingv0,Low_Ha4Traj1Movingv0,TOP),
Low_Movingv := add(Top_Movingvsqm,Low_Movingvsqm,Top_Ha4Traj1Movingv0,Low_Ha4Traj1Movingv0,LOW),
Top_Ha4Traj1Moving3integral_input := Top_Movingv,
Low_Ha4Traj1Moving3integral_input := Low_Movingv,
Top_Reg1 := Top_Ha4Traj1Moving3integral,
Low_Reg1 := Low_Ha4Traj1Moving3integral,
Top_Reg2 := mult(Top_Ha4Traj1Moving3integral_inputPRE,Low_Ha4Traj1Moving3integral_inputPRE,Top_dt,Low_dt,TOP),
Low_Reg2 := mult(Top_Ha4Traj1Moving3integral_inputPRE,Low_Ha4Traj1Moving3integral_inputPRE,Top_dt,Low_dt,LOW),
Top_Ha4Traj1Moving3integral := add(Top_Reg1,Low_Reg1,Top_Reg2,Low_Reg2,TOP),
Low_Ha4Traj1Moving3integral := add(Top_Reg1,Low_Reg1,Top_Reg2,Low_Reg2,LOW),
Top_Movingpsqm := Top_Ha4Traj1Moving3integral,
Low_Movingpsqm := Low_Ha4Traj1Moving3integral,
Top_Ha4Traj1Moving3integral_inputPRE := Top_Ha4Traj1Moving3integral_input,
Low_Ha4Traj1Moving3integral_inputPRE := Low_Ha4Traj1Moving3integral_input,
Top_Movingp := add(Top_Movingpsqm,Low_Movingpsqm,Top_Ha4Traj1Movingp0,Low_Ha4Traj1Movingp0,TOP),
Low_Movingp := add(Top_Movingpsqm,Low_Movingpsqm,Top_Ha4Traj1Movingp0,Low_Ha4Traj1Movingp0,LOW),
Top_Trajpx := Top_Movingp,
Low_Trajpx := Low_Movingp,
Top_Trajvx := Top_Movingv,
Low_Trajvx := Low_Movingv,
Top_Ha4Traj2Moving1integral_input := 0,
Low_Ha4Traj2Moving1integral_input := 0,
Top_Reg1 := Top_Ha4Traj2Moving1integral,
Low_Reg1 := Low_Ha4Traj2Moving1integral,
Top_Reg2 := mult(Top_Ha4Traj2Moving1integral_inputPRE,Low_Ha4Traj2Moving1integral_inputPRE,Top_dt,Low_dt,TOP),
Low_Reg2 := mult(Top_Ha4Traj2Moving1integral_inputPRE,Low_Ha4Traj2Moving1integral_inputPRE,Top_dt,Low_dt,LOW),
Top_Ha4Traj2Moving1integral := add(Top_Reg1,Low_Reg1,Top_Reg2,Low_Reg2,TOP),
Low_Ha4Traj2Moving1integral := add(Top_Reg1,Low_Reg1,Top_Reg2,Low_Reg2,LOW),
Top_Movingvsqm := Top_Ha4Traj2Moving1integral,
Low_Movingvsqm := Low_Ha4Traj2Moving1integral,
Top_Ha4Traj2Moving1integral_inputPRE := Top_Ha4Traj2Moving1integral_input,
Low_Ha4Traj2Moving1integral_inputPRE := Low_Ha4Traj2Moving1integral_input,
Top_Movingv := add(Top_Movingvsqm,Low_Movingvsqm,Top_Ha4Traj2Movingv0,Low_Ha4Traj2Movingv0,TOP),
Low_Movingv := add(Top_Movingvsqm,Low_Movingvsqm,Top_Ha4Traj2Movingv0,Low_Ha4Traj2Movingv0,LOW),
Top_Ha4Traj2Moving3integral_input := Top_Movingv,
Low_Ha4Traj2Moving3integral_input := Low_Movingv,
Top_Reg1 := Top_Ha4Traj2Moving3integral,
Low_Reg1 := Low_Ha4Traj2Moving3integral,
Top_Reg2 := mult(Top_Ha4Traj2Moving3integral_inputPRE,Low_Ha4Traj2Moving3integral_inputPRE,Top_dt,Low_dt,TOP),
Low_Reg2 := mult(Top_Ha4Traj2Moving3integral_inputPRE,Low_Ha4Traj2Moving3integral_inputPRE,Top_dt,Low_dt,LOW),
Top_Ha4Traj2Moving3integral := add(Top_Reg1,Low_Reg1,Top_Reg2,Low_Reg2,TOP),
Low_Ha4Traj2Moving3integral := add(Top_Reg1,Low_Reg1,Top_Reg2,Low_Reg2,LOW),
Top_Movingpsqm := Top_Ha4Traj2Moving3integral,
Low_Movingpsqm := Low_Ha4Traj2Moving3integral,
Top_Ha4Traj2Moving3integral_inputPRE := Top_Ha4Traj2Moving3integral_input,
Low_Ha4Traj2Moving3integral_inputPRE := Low_Ha4Traj2Moving3integral_input,
Top_Movingp := add(Top_Movingpsqm,Low_Movingpsqm,Top_Ha4Traj2Movingp0,Low_Ha4Traj2Movingp0,TOP),
Low_Movingp := add(Top_Movingpsqm,Low_Movingpsqm,Top_Ha4Traj2Movingp0,Low_Ha4Traj2Movingp0,LOW),
Top_Trajpy := Top_Movingp,
Low_Trajpy := Low_Movingp,
Top_Trajvy := Top_Movingv,
Low_Trajvy := Low_Movingv,
Top_Reg1 := Top_Trajpx,
Low_Reg1 := Low_Trajpx,
Top_Reg2 := -10,
Low_Reg2 := 0,
BoolReg3 := compareEL(Top_Reg1,Low_Reg1,Top_Reg2,Low_Reg2),
Ha4Traj3edge_input := BoolReg3,
Trajev1 := Ha4Traj3edge_input and (not Ha4Traj3edge_inputPRE),
Ha4Traj3edge_inputPRE := Ha4Traj3edge_input,
Top_Reg1 := Top_Trajpx,
Low_Reg1 := Low_Trajpx,
Top_Reg2 := 15,
Low_Reg2 := 0,
BoolReg3 := compareER(Top_Reg1,Low_Reg1,Top_Reg2,Low_Reg2),
Ha4Traj4edge_input := BoolReg3,
Trajev2 := Ha4Traj4edge_input and (not Ha4Traj4edge_inputPRE),
Ha4Traj4edge_inputPRE := Ha4Traj4edge_input,
Top_Reg1 := Top_Trajpy,
Low_Reg1 := Low_Trajpy,
Top_Reg2 := -10,
Low_Reg2 := 0,
BoolReg3 := compareEL(Top_Reg1,Low_Reg1,Top_Reg2,Low_Reg2),
Ha4Traj5edge_input := BoolReg3,
Trajev3 := Ha4Traj5edge_input and (not Ha4Traj5edge_inputPRE),
Ha4Traj5edge_inputPRE := Ha4Traj5edge_input,
Top_Reg1 := Top_Trajpy,
Low_Reg1 := Low_Trajpy,
Top_Reg2 := 15,
Low_Reg2 := 0,
BoolReg3 := compareER(Top_Reg1,Low_Reg1,Top_Reg2,Low_Reg2),
Ha4Traj6edge_input := BoolReg3,
Trajev4 := Ha4Traj6edge_input and (not Ha4Traj6edge_inputPRE),
Ha4Traj6edge_inputPRE := Ha4Traj6edge_input</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="400" y="100">(Trajev1  !=  NoEvent  or  Trajev2  !=  NoEvent) and
(Trajev3  !=  NoEvent  or  Trajev4  !=  NoEvent)</label>
			<label kind="assignment" x="400" y="150">Top_Ssfuncpxsqm := Top_Trajpx,
Low_Ssfuncpxsqm := Low_Trajpx,
Top_Ssfuncpysqm := Top_Trajpy,
Low_Ssfuncpysqm := Low_Trajpy,
Top_Ssfuncvxsqm := -Top_Trajvx,
Low_Ssfuncvxsqm := -Low_Trajvx,
Top_Ssfuncvysqm := -Top_Trajvy,
Low_Ssfuncvysqm := -Low_Trajvy</label>
			<nail x="400" y="50"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="600" y="100">(Trajev1  !=  NoEvent  or  Trajev2  !=  NoEvent) and
not(Trajev3  !=  NoEvent  or  Trajev4  !=  NoEvent)</label>
			<label kind="assignment" x="600" y="150">Top_Ssfuncpxsqm := Top_Trajpx,
Low_Ssfuncpxsqm := Low_Trajpx,
Top_Ssfuncpysqm := Top_Trajpy,
Low_Ssfuncpysqm := Low_Trajpy,
Top_Ssfuncvxsqm := -Top_Trajvx,
Low_Ssfuncvxsqm := -Low_Trajvx,
Top_Ssfuncvysqm := Top_Trajvy,
Low_Ssfuncvysqm := Low_Trajvy</label>
			<nail x="410" y="50"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="800" y="100">not(Trajev1  !=  NoEvent  or  Trajev2  !=  NoEvent) and
(Trajev3  !=  NoEvent  or  Trajev4  !=  NoEvent)</label>
			<label kind="assignment" x="800" y="150">Top_Ssfuncpxsqm := Top_Trajpx,
Low_Ssfuncpxsqm := Low_Trajpx,
Top_Ssfuncpysqm := Top_Trajpy,
Low_Ssfuncpysqm := Low_Trajpy,
Top_Ssfuncvxsqm := Top_Trajvx,
Low_Ssfuncvxsqm := Low_Trajvx,
Top_Ssfuncvysqm := -Top_Trajvy,
Low_Ssfuncvysqm := -Low_Trajvy</label>
			<nail x="420" y="50"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="400" y="0">not(Trajev1  !=  NoEvent  or  Trajev2  !=  NoEvent) and
not(Trajev3  !=  NoEvent  or  Trajev4  !=  NoEvent)</label>
			<label kind="assignment" x="400" y="50">Top_Ha4Output1 := Top_Trajpx,
Low_Ha4Output1 := Low_Trajpx,
Top_Ha4Output2 := Top_Trajpy,
Low_Ha4Output2 := Low_Trajpy,
Top_Ha4Output3 := Top_Trajvx,
Low_Ha4Output3 := Low_Trajvx,
Top_Ha4Output4 := Top_Trajvy,
Low_Ha4Output4 := Low_Trajvy</label>
			<nail x="500" y="0"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="assignment" x="400" y="250">Top_Ha4px0 := Top_Ssfuncpxsqm,
Low_Ha4px0 := Low_Ssfuncpxsqm,
Top_Ha4py0 := Top_Ssfuncpysqm,
Low_Ha4py0 := Low_Ssfuncpysqm,
Top_Ha4vx0 := Top_Ssfuncvxsqm,
Low_Ha4vx0 := Low_Ssfuncvxsqm,
Top_Ha4vy0 := Top_Ssfuncvysqm,
Low_Ha4vy0 := Low_Ssfuncvysqm</label>
			<nail x="500" y="100"/>
		</transition>
	</template>
	<template>
		<name>RT</name>
		<location id="id7" x="170" y="0">
			<committed/>
		</location>
		<location id="id8" x="0" y="0">
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="85" y="45">chk?</label>
			<label kind="assignment" x="85" y="55">Top_dt := 0,
Low_dt := 0</label>
			<nail x="85" y="40"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="85" y="-45">compareER(Top_dt,Low_dt,sub(Top_Sampling,Low_Sampling,Top_Range,Low_Range,TOP),sub(Top_Sampling,Low_Sampling,Top_Range,Low_Range,LOW))</label>
			<label kind="synchronisation" x="70" y="-55">trig!</label>
			<nail x="85" y="-40"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="guard" x="-90" y="-80">compareL(Top_dt,Low_dt,add(Top_Sampling,Low_Sampling,Top_Range,Low_Range,TOP),add(Top_Sampling,Low_Sampling,Top_Range,Low_Range,LOW))</label>
			<label kind="assignment" x="-90" y="-70">Top_Reg3 := Top_dt,
Low_Reg3 := Low_dt,
Top_dt := add(Top_Reg3,Low_Reg3,Top_Interval,Low_Interval,TOP),
Low_dt := add(Top_Reg3,Low_Reg3,Top_Interval,Low_Interval,LOW)</label>
			<nail x="-85" y="-50"/>
			<nail x="-85" y="50"/>
		</transition>
	</template>
	<system>
system SwitchSignalFunction,RT;</system>
	<queries>
		<query>
			<formula>A[](Top_Output1 &lt; 100 and Top_Output1 &gt; -100 and Top_Output2 &lt; 100 and Top_Output2 &gt; -100)
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
